{"version":3,"sources":["images/noimage.jpg","components/Post.jsx","images/grid_four.svg","images/grid_three.svg","components/PostsList.jsx","api/index.js","actions/types.js","components/AddPostForm.jsx","actions/post.js","components/EditPostForm.jsx","components/PostDetails.jsx","App.js","reducers/post.js","reducers/rootReducer.js","store.js","index.js"],"names":["useStyles","makeStyles","theme","root","maxWidth","position","media","height","paddingTop","backgroundColor","backgroundBlendMode","overlay","top","left","color","chip","marginTop","spacing","Post","date","_id","title","subtitle","content","tag","image","createdAt","classes","Card","className","to","CardMedia","noImage","Typography","variant","moment","fromNow","CardContent","component","gutterBottom","substring","Chip","label","CardActions","Button","size","layoutShifter","float","margin","PostsList","posts","useSelector","state","useState","layout","setLayout","length","css","onClick","src","gridThree","alt","style","background","gridFour","Grid","container","alignContent","map","post","item","xs","md","apiBaseUrl","fetchPosts","a","axios","get","fetchSinglePost","id","createPost","updatePost","updatedPost","patch","deletePost","delete","FETCH_POSTS","CREATE_POST","FETCH_SINGLE_POST","DELETE_POST","UPDATE_POST","paper","padding","textField","marginBottom","tags","postSchema","yup","shape","required","min","oneOf","AddPostForm","open","handleClose","dispatch","useDispatch","file","setFile","useForm","resolver","yupResolver","register","handleSubmit","control","errors","reset","onSubmit","data","api","type","types","payload","console","log","clearForm","Dialog","onClose","DialogTitle","DialogContent","DialogContentText","noValidate","autoComplete","TextField","name","inputRef","error","fullWidth","as","Select","input","Input","index","MenuItem","value","defaultValue","multiline","rows","multiple","onDone","base64","DialogActions","buttons","button","marginRight","EditPostForm","history","closeEditMode","header","display","justifyContent","width","borderRadius","PostDetails","location","match","params","selectedPost","editMode","setEditMode","useEffect","Paper","elevation","startIcon","push","Divider","flexGrow","menuButton","App","setOpen","CssBaseline","Container","AppBar","Toolbar","IconButton","edge","aria-label","href","exact","path","from","initState","postReducer","action","filter","rootReducer","combineReducers","store","createStore","compose","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.da0feb27.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/noimage.e5c4bd8d.jpg\";","import React from 'react'\r\nimport moment from 'moment';\r\nimport { Link } from 'react-router-dom';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { \r\n    Card,\r\n    Chip,\r\n    Button,\r\n    CardMedia,\r\n    CardContent,\r\n    CardActions,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport noImage from '../images/noimage.jpg';\r\n\r\nconst useStyles = makeStyles(\r\n    (theme) => ({\r\n        root: {\r\n            maxWidth: 374,\r\n            position: \"relative\",\r\n        },\r\n        media: {\r\n            height: 0,\r\n            paddingTop: \"56.25%\", // 16:9\r\n            backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n            backgroundBlendMode: \"darken\",\r\n        },\r\n        \r\n        overlay: {\r\n            position: \"absolute\",\r\n            top: \"20px\",\r\n            left: \"20px\",\r\n            color: \"white\",\r\n        },\r\n        chip: {\r\n            marginTop: theme.spacing(1),\r\n        },\r\n    })\r\n)\r\n\r\nconst Post = ({ _id, title, subtitle, content, tag, image, createdAt }) => {\r\n    \r\n    const convertRelativeTime = date => {\r\n        return moment(date).fromNow();\r\n    }\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Card className={classes.root}>\r\n            <Link to={`/posts/${_id}`}>\r\n                <CardMedia \r\n                    className={classes.media} \r\n                    image={image || noImage} \r\n                    title=\"Image\"\r\n                ></CardMedia>\r\n            </Link>\r\n            <div className={classes.overlay}>\r\n                <Typography variant=\"h6\">owner</Typography>\r\n                <Typography variant=\"body2\">{convertRelativeTime(createdAt)}</Typography>\r\n            </div>\r\n\r\n            <CardContent>\r\n                <Typography variant=\"h6\" component=\"p\" gutterBottom>\r\n                    {title}\r\n                </Typography>{\" \"}\r\n                <Typography variant=\"overline\" component=\"p\" gutterBottom>\r\n                    {subtitle}\r\n                </Typography>{\" \"}\r\n                <Typography variant=\"body2\" component=\"p\">\r\n                    {content?.substring(0, 250) + \"...\"}\r\n                </Typography>\r\n                <Chip label={`# ${tag}`} variant=\"outlined\" className={classes.chip} />\r\n            </CardContent>\r\n            <CardActions>\r\n                <Button size=\"small\" color=\"primary\">\r\n                <Link to={`/posts/${_id}`}>Daha Fazla</Link>\r\n                </Button>\r\n            </CardActions>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default Post\r\n","export default __webpack_public_path__ + \"static/media/grid_four.d897e640.svg\";","export default __webpack_public_path__ + \"static/media/grid_three.c45b945b.svg\";","import React, {useState} from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useSelector } from 'react-redux';\r\nimport { Grid, Button } from '@material-ui/core';\r\nimport Post from './Post';\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport gridFour from \"../images/grid_four.svg\";\r\nimport gridThree from \"../images/grid_three.svg\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    layoutShifter: {\r\n        float: \"right\",\r\n        margin: theme.spacing(2)\r\n    }\r\n}));\r\n\r\nconst PostsList = () => {\r\n\r\n    const posts = useSelector(state => state.posts.posts)\r\n\r\n    const classes = useStyles();\r\n\r\n    const [layout, setLayout] = useState(\"gridThree\");\r\n\r\n    const calculateMd = () => {\r\n        return layout === \"gridThree\" ? 4 : 3;\r\n    }\r\n\r\n    if(posts.length === 0){\r\n        return (\r\n            <>\r\n              <ClipLoader size={50} css={`\r\n                display: block;\r\n                margin: 120px auto;\r\n                `} />  \r\n            </>\r\n        )\r\n    }\r\n    else\r\n        return (\r\n            <>\r\n            { /*  */}\r\n            <div className={classes.layoutShifter}>\r\n                <Button variant=\"text\" size=\"small\" onClick={() => setLayout(\"gridThree\")}>\r\n                    <img src={gridThree} alt=\"Three Column\" style={{ background: layout === \"gridThree\" ? \"#ccc\" : \"\" }} />\r\n                </Button>\r\n\r\n                <Button variant=\"text\" size=\"small\" onClick={() => setLayout(\"gridFour\")}>\r\n                    <img src={gridFour} alt=\"Four Column\" style={{ background: layout === \"gridFour\" ? \"#ccc\" : \"\" }} />\r\n                </Button>\r\n            </div>\r\n                <Grid container spacing={2} alignContent=\"stretch\">\r\n                    {\r\n                        posts.length > 0 &&\r\n                        posts.map((post) => (\r\n                            <Grid item key={post?._id} xs={12} md={calculateMd()}>\r\n                                <Post {...post} />\r\n                            </Grid>\r\n                        ))\r\n                    }\r\n                </Grid>\r\n            </>\r\n        )\r\n}\r\n\r\nexport default PostsList\r\n","import axios from 'axios';\r\nconst apiBaseUrl = \"https://foodcourt-backend.herokuapp.com\";\r\nconst posts = '/posts/'\r\nexport const fetchPosts =\r\n    async () => await axios.get(apiBaseUrl + posts);\r\n\r\nexport const fetchSinglePost =\r\n    async (id) => await axios.get(`${apiBaseUrl + posts}${id}`);\r\n\r\nexport const createPost =\r\n    async (post) => await axios.post(apiBaseUrl + posts, post);\r\n\r\n    \r\nexport const updatePost =\r\n    async (id, updatedPost) => await axios.patch(`${apiBaseUrl + posts}${id}`, updatedPost);\r\n\r\n\r\nexport const deletePost =\r\n    async (id) => await axios.delete(`${apiBaseUrl + posts}${id}`);","export const FETCH_POSTS = 'FETCH_POSTS';\r\nexport const CREATE_POST = 'CREATE_POST';\r\nexport const FETCH_SINGLE_POST = \"FETCH_SINGLE_POST\";\r\nexport const DELETE_POST = \"DELETE_POST\";\r\nexport const UPDATE_POST = \"UPDATE_POST\";","import React, {useState} from 'react'\r\nimport { makeStyles } from '@material-ui/core';\r\nimport {\r\n    Button,\r\n    TextField,\r\n    Select,\r\n    Input,\r\n    MenuItem,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle\r\n} from '@material-ui/core';\r\n\r\nimport { useDispatch } from 'react-redux'\r\nimport FileBase64 from 'react-file-base64';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport * as yup from 'yup';\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { createPost } from '../actions/post'\r\n\r\nconst useStyles = makeStyles((theme) => \r\n    ({\r\n        root:{\r\n            // padding: theme.spacing(2)\r\n        },\r\n        paper:{\r\n            padding: theme.spacing(3)\r\n        },\r\n        textField:{\r\n            marginBottom:theme.spacing(2),\r\n        }\r\n    })\r\n);\r\n\r\nconst tags = [\"dinner\", \"breakfast\", \"cookie\", \"desert\"]\r\nconst postSchema = yup.object().shape(\r\n    {\r\n        title:yup.string().required(),\r\n        subtitle:yup.string().required(),\r\n        content:yup.string().min(20).required(),\r\n        tag: yup.mixed().oneOf(tags)\r\n    }\r\n);\r\n\r\nexport const AddPostForm = ({open, handleClose}) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const [ file, setFile ] = useState(null);    \r\n    const { register, handleSubmit, control, errors, reset } = useForm({\r\n        resolver: yupResolver(postSchema)\r\n    });\r\n\r\n    const onSubmit = (data) => {\r\n        dispatch(createPost(\r\n            {\r\n                ...data, \r\n                image:file\r\n            }\r\n        ));\r\n        clearForm();\r\n        \r\n    };\r\n\r\n    const clearForm = () => {\r\n        reset();\r\n        setFile(null);\r\n        handleClose();\r\n    };\r\n\r\n    const classes = useStyles();\r\n    \r\n    return (\r\n        <Dialog open={open} onClose={handleClose}>\r\n            <DialogTitle>\r\n                Yeni yazi olustur\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                <DialogContentText>\r\n                    Yeni bir yazi eklemek icin formu doldurunuz.\r\n                </DialogContentText>\r\n                <div className={classes.root}>\r\n                    <form noValidate autoComplete=\"off\" onSubmit={handleSubmit(onSubmit)}>\r\n                        <TextField\r\n                            id=\"title\"\r\n                            label=\"Başlık\"\r\n                            name='title'\r\n                            variant='outlined'\r\n                            className={classes.textField}\r\n                            size='small'\r\n                            inputRef={register}\r\n                            error={errors.title ? true : false}\r\n                            fullWidth\r\n                        />\r\n\r\n                        <TextField\r\n                            id=\"subtitle\"\r\n                            label=\"Alt Başlık\"\r\n                            name='subtitle'\r\n                            variant='outlined'\r\n                            className={classes.textField}\r\n                            size='small'\r\n                            inputRef={register}\r\n                            error={errors.subtitle ? true : false}\r\n                            fullWidth\r\n                        />\r\n\r\n                        <Controller \r\n                            as={\r\n                                <Select\r\n                                input={<Input />}\r\n                                className={classes.textField}\r\n                                fullWidth\r\n                                >\r\n                                    {\r\n                                        tags.map((tag, index) => (\r\n                                            <MenuItem\r\n                                            key={index}\r\n                                            value={tag}\r\n                                            >\r\n                                                {tag}\r\n                                            </MenuItem>\r\n                                        ))\r\n                                    }\r\n                                </Select>\r\n                            }\r\n\r\n                            name='tag'\r\n                            control={control}\r\n                            error={errors.tag ? true : false}\r\n                            defaultValue={tags[0]}\r\n                        />\r\n\r\n                        <TextField\r\n                            id=\"content\"\r\n                            label=\"Açıklama\"\r\n                            name='content'\r\n                            multiline\r\n                            rows={4}\r\n                            variant='outlined'\r\n                            className={classes.textField}\r\n                            size='small'\r\n                            inputRef={register}\r\n                            error={errors.content ? true : false}\r\n                            fullWidth\r\n                        />\r\n\r\n                        <FileBase64 multiple={false} onDone={({base64}) => setFile(base64)} />\r\n\r\n                    </form>\r\n                </div>\r\n            </DialogContent>\r\n            <DialogActions className={classes.paper}>\r\n                <Button \r\n                 color='inherit' \r\n                 onClick={clearForm}\r\n                 >Vazgec</Button>\r\n                <Button \r\n                 type='submit'\r\n                 variant='outlined' \r\n                 color=\"primary\"\r\n                 onClick={() => handleSubmit(onSubmit)()}\r\n                 >Yayinla</Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default AddPostForm\r\n","import * as api from '../api/index';\r\nimport * as types from './types';\r\n\r\n\r\nexport const fetchPosts = () => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.fetchPosts();\r\n        dispatch({\r\n            type: types.FETCH_POSTS,\r\n            payload: data\r\n        })\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n};\r\n\r\nexport const createPost = (post) => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.createPost(post);\r\n        dispatch({\r\n            type: types.CREATE_POST,\r\n            payload: data\r\n        })\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n};\r\n\r\nexport const fetchSinglePost = (id) => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.fetchSinglePost(id);\r\n        dispatch({\r\n            type: types.FETCH_SINGLE_POST,\r\n            payload: data\r\n        })\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const updatePost = (id, post) => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.updatePost(id, post);\r\n        dispatch({\r\n            type: types.UPDATE_POST,\r\n            payload: data\r\n        })\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const deletePost = (id) => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.deletePost(id);\r\n        dispatch({\r\n            type: types.DELETE_POST,\r\n            payload: data._id\r\n        })\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n// export default fetchPosts;","import React, {useState} from 'react'\r\nimport { makeStyles } from '@material-ui/core';\r\nimport {\r\n    Button,\r\n    TextField,\r\n    Select,\r\n    Input,\r\n    MenuItem,\r\n} from '@material-ui/core';\r\n\r\nimport { useDispatch } from 'react-redux'\r\nimport FileBase64 from 'react-file-base64';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport * as yup from 'yup';\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { updatePost } from '../actions/post';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => \r\n    ({\r\n        textField:{\r\n            marginBottom:theme.spacing(2),\r\n        },\r\n        buttons:{\r\n            marginTop: theme.spacing(2),\r\n        },\r\n        button:{\r\n            marginRight: theme.spacing(2)\r\n        }\r\n    })\r\n);\r\n\r\nconst tags = [\"dinner\", \"breakfast\", \"cookie\", \"desert\"]\r\nconst postSchema = yup.object().shape(\r\n    {\r\n        title:yup.string().required(),\r\n        subtitle:yup.string().required(),\r\n        content:yup.string().min(20).required(),\r\n        tag: yup.mixed().oneOf(tags)\r\n    }\r\n);\r\n\r\nexport const EditPostForm = ({ history, post, closeEditMode }) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const [ file, setFile ] = useState(post?.image);    \r\n    const { register, handleSubmit, control, errors, reset } = useForm({\r\n        resolver: yupResolver(postSchema)\r\n    });\r\n\r\n    const onSubmit = (data) => {\r\n        \r\n        const updatedPost = {\r\n            _id: post._id,\r\n            ...data,\r\n            image: file\r\n        }\r\n        dispatch(updatePost(post._id, updatedPost));\r\n        reset();\r\n        setFile(null);\r\n        closeEditMode();\r\n    };\r\n\r\n    const classes = useStyles();\r\n    \r\n    return (\r\n        <div>\r\n            <form noValidate autoComplete=\"off\" onSubmit={handleSubmit(onSubmit)}>\r\n                <TextField\r\n                    id=\"title\"\r\n                    label=\"Başlık\"\r\n                    name='title'\r\n                    variant='outlined'\r\n                    className={classes.textField}\r\n                    size='small'\r\n                    inputRef={register}\r\n                    error={errors.title ? true : false}\r\n                    fullWidth\r\n                    defaultValue={post?.title}\r\n                />\r\n\r\n                <TextField\r\n                    id=\"subtitle\"\r\n                    label=\"Alt Başlık\"\r\n                    name='subtitle'\r\n                    variant='outlined'\r\n                    className={classes.textField}\r\n                    size='small'\r\n                    inputRef={register}\r\n                    error={errors.subtitle ? true : false}\r\n                    fullWidth\r\n                    defaultValue={post?.subtitle}\r\n                />\r\n\r\n                <Controller \r\n                    as={\r\n                        <Select\r\n                        input={<Input />}\r\n                        className={classes.textField}\r\n                        defaultValue={post?.tag}\r\n                        fullWidth\r\n                        >\r\n                            {\r\n                                tags.map((tag, index) => (\r\n                                    <MenuItem\r\n                                    key={index}\r\n                                    value={tag}\r\n                                    >\r\n                                        {tag}\r\n                                    </MenuItem>\r\n                                ))\r\n                            }\r\n                        </Select>\r\n                    }\r\n\r\n                    name='tag'\r\n                    control={control}\r\n                    error={errors.tag ? true : false}\r\n                    defaultValue={tags[0]}\r\n                />\r\n\r\n                <TextField\r\n                    id=\"content\"\r\n                    label=\"Açıklama\"\r\n                    name='content'\r\n                    multiline\r\n                    rows={4}\r\n                    variant='outlined'\r\n                    className={classes.textField}\r\n                    size='small'\r\n                    inputRef={register}\r\n                    error={errors.content ? true : false}\r\n                    fullWidth\r\n                    defaultValue={post?.content}\r\n                />\r\n\r\n                <FileBase64 multiple={false} onDone={({base64}) => setFile(base64)} />\r\n                \r\n                <div className={classes.buttons}>\r\n                    <Button className={classes.button} color=\"secondary\" variant=\"outlined\" onClick={closeEditMode}>Vazgec</Button>\r\n                    <Button color=\"primary\" variant=\"outlined\" type=\"submit\">Kaydet</Button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EditPostForm\r\n","import React, { useState, useEffect } from 'react'\r\nimport moment from 'moment'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { Typography, Paper, Divider, Button, Chip } from '@material-ui/core'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport EditIcon from '@material-ui/icons/Edit'\r\nimport noImage from '../images/noimage.jpg'\r\nimport { fetchSinglePost, deletePost } from '../actions/post'\r\n\r\nimport EditPostForm from './EditPostForm'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        padding: theme.spacing(3),\r\n        marginBottom: theme.spacing(8),\r\n    },\r\n    header: {\r\n        display: \"flex\",\r\n        justifyContent: \"space-between\",\r\n    },\r\n    content: {\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    image: {\r\n        width: \"100%\",\r\n        borderRadius: 5,\r\n        marginTop: theme.spacing(3),\r\n        marginBottom: theme.spacing(4),\r\n    },\r\n    chip: {\r\n        marginTop: theme.spacing(1),\r\n    },\r\n}));\r\n\r\nconst PostDetails = ({ history, location, match }) => {\r\n\r\n    const { id } = match.params;\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const selectedPost = useSelector(state => state.posts.selectedPost);\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchSinglePost(id));\r\n    }, [dispatch, id])\r\n\r\n    const convertRelativeTime = date => {\r\n        return moment(date).fromNow();\r\n    }\r\n\r\n    const removePost = () => {\r\n        dispatch(deletePost(selectedPost._id));\r\n        history.push(\"/posts\");\r\n    }\r\n\r\n    const openEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const closeEditMode = () => {\r\n        setEditMode(false);\r\n    }\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <Paper className={classes.paper} elevation={0}>\r\n             {\r\n                 (\r\n                     editMode ? ( <EditPostForm post={selectedPost} closeEditMode={closeEditMode} /> ) : (\r\n                        <div>\r\n                            <div>\r\n                                <div className={classes.header}>\r\n                                    <Typography variant=\"h5\" gutterBottom>\r\n                                        {selectedPost?.title}\r\n                                    </Typography>\r\n                                </div>\r\n                                <Button\r\n                                    style={{ margin: \"0 10px 10px 0\"}}\r\n                                    color='primary'\r\n                                    variant='outlined'\r\n                                    onClick={openEditMode}\r\n                                    startIcon={<EditIcon />}>\r\n                                    Duzenle\r\n                                </Button>\r\n                                <Button\r\n                                    style={{ margin: \"0 10px 10px 0\"}}\r\n                                    color='primary'\r\n                                    variant='outlined'\r\n                                    onClick={removePost}\r\n                                    startIcon={<DeleteIcon />}>\r\n                                    Sil\r\n                                </Button>\r\n                            </div>\r\n            \r\n                            <Divider />\r\n            \r\n                            <Typography variant=\"overline\" gutterBottom>\r\n                                {selectedPost?.subtitle}\r\n                            </Typography>\r\n            \r\n                            <Typography variant=\"caption\" component='p'>\r\n                                {convertRelativeTime(selectedPost?.createdAt)}\r\n                            </Typography>\r\n                            <Chip label={`# ${selectedPost?.tag}`} variant=\"outlined\" className={classes.chip} />\r\n                            <div className={classes.content}>\r\n                                <img src={selectedPost?.image || noImage} alt=\"post\" className={classes.image}></img>\r\n                                <Typography variant=\"body1\">\r\n                                    {selectedPost?.content}\r\n                                </Typography>\r\n                            </div>\r\n                        </div>\r\n                     )\r\n                 )\r\n             }\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default PostDetails\r\n","import React, { useState, useEffect } from 'react'\r\nimport { CssBaseline, Container, Grid, AppBar, Toolbar, Typography, Button, IconButton } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PenIcon from '@material-ui/icons/Create'\r\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom'\r\nimport PostsList from './components/PostsList.jsx';\r\nimport AddPostForm from './components/AddPostForm.jsx'\r\nimport { fetchPosts } from './actions/post';\r\nimport { useDispatch } from 'react-redux';\r\nimport PostDetails from './components/PostDetails.jsx';\r\nconst useStyles = makeStyles((theme) =>\r\n({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2)\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  container: {\r\n    marginTop: theme.spacing(3)\r\n  }\r\n})\r\n)\r\n\r\nexport const App = () => {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchPosts());\r\n  }, [dispatch])\r\n\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true)\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false)\r\n  };\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"lg\">\r\n        <AppBar\r\n          position=\"static\"\r\n          color=\"inherit\"\r\n          elevation={0}>\r\n          <Toolbar>\r\n            <IconButton\r\n              edge=\"start\"\r\n              className={classes.menuButton}\r\n              color=\"inherit\"\r\n              aria-label=\"menu\"\r\n            >\r\n            </IconButton>\r\n            <Typography\r\n              variant=\"h6\"\r\n              color=\"secondary\"\r\n              className={classes.title}\r\n            >\r\n              <a href=\"/posts\">FoodCourt</a>\r\n            </Typography>\r\n            <Button color=\"primary\" variant=\"outlined\" startIcon={<PenIcon />} onClick={handleOpen}>Yeni Yazi</Button>\r\n          </Toolbar>\r\n        </AppBar>\r\n\r\n        <Grid container className={classes.container}>\r\n          <Grid item xs={12} >\r\n            <Router>\r\n              <Switch>\r\n                <Route exact path=\"/posts\" component={PostsList}></Route>\r\n                <Route exact path=\"/posts/:id\" component={PostDetails}></Route>\r\n              </Switch>\r\n              <Redirect from=\"/\" to=\"/posts\" ></Redirect>\r\n            </Router>\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n\r\n      <AddPostForm open={open} handleClose={handleClose} />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App;","import * as types from '../actions/types';\r\n\r\nconst initState = {\r\n    posts: [],\r\n    selectedPost: null\r\n};\r\n\r\nconst postReducer =\r\n    (state = initState, action) => {\r\n        switch (action.type) {\r\n            case types.FETCH_POSTS:\r\n                return {\r\n                    ...state,\r\n                    posts: action.payload,\r\n                };\r\n            case types.FETCH_SINGLE_POST:\r\n                return {\r\n                    ...state,\r\n                    selectedPost: action.payload\r\n                };\r\n            case types.CREATE_POST:\r\n                return {\r\n                    ...state,\r\n                    posts: [...state.posts, action.payload],\r\n                };\r\n            case types.UPDATE_POST:\r\n                return {\r\n                    ...state,\r\n                    posts: state.posts.map((post) => {\r\n                    if (post._id === action.payload._id) {\r\n                        return action.payload;\r\n                    } else {\r\n                        return post;\r\n                    }\r\n                    }),\r\n                    selectedPost: action.payload,\r\n                };\r\n            case types.DELETE_POST:\r\n                return {\r\n                    ...state,\r\n                    posts: state.posts.filter(post => post._id !== action.payload),\r\n                    selectedPost: null\r\n                };\r\n            default:\r\n                return {\r\n                    ...state\r\n                };\r\n        }\r\n    }\r\n\r\nexport default postReducer;\r\n","import { combineReducers } from 'redux';\r\nimport postReducer from './post';\r\n\r\nconst rootReducer = combineReducers(\r\n    {\r\n        posts: postReducer,\r\n    }\r\n)\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\nimport rootReducer from './reducers/rootReducer';\r\n\r\nconst store = createStore(rootReducer, {}, compose(\r\n    applyMiddleware(thunk),\r\n    // composeWithDevTools()\r\n))\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}